/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Provider } from '@ethersproject/providers';

export interface VotingEscrowInterface extends utils.Interface {
  contractName: 'VotingEscrow';
  functions: {
    'abstain(uint256)': FunctionFragment;
    'agency()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfAtLockerId(uint256,uint256)': FunctionFragment;
    'balanceOfLockerId(uint256)': FunctionFragment;
    'balanceOfLockerIdAt(uint256,uint256)': FunctionFragment;
    'checkpoint()': FunctionFragment;
    'createLock(uint256,uint256)': FunctionFragment;
    'createLockFor(uint256,uint256,address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'depositFor(address,uint256)': FunctionFragment;
    'epoch()': FunctionFragment;
    'getLastUserSlope(uint256)': FunctionFragment;
    'increaseAmount(uint256)': FunctionFragment;
    'increaseUnlockTime(uint256)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'isOwner(address,uint256)': FunctionFragment;
    'isVoted(uint256)': FunctionFragment;
    'locked(uint256)': FunctionFragment;
    'lockedEnd(uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'ownerToId(address)': FunctionFragment;
    'pointHistory(uint256)': FunctionFragment;
    'setAgency(address)': FunctionFragment;
    'setVoter(address)': FunctionFragment;
    'slopeChanges(uint256)': FunctionFragment;
    'supply()': FunctionFragment;
    'symbol()': FunctionFragment;
    'token()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalSupplyAt(uint256)': FunctionFragment;
    'totalSupplyAtT(uint256)': FunctionFragment;
    'userPointEpoch(uint256)': FunctionFragment;
    'userPointHistory(uint256,uint256)': FunctionFragment;
    'userPointHistoryTs(uint256,uint256)': FunctionFragment;
    'version()': FunctionFragment;
    'voted(uint256)': FunctionFragment;
    'voter()': FunctionFragment;
    'voting(uint256)': FunctionFragment;
    'withdraw()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'abstain',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'agency', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'balanceOfAtLockerId',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfLockerId',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfLockerIdAt',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpoint',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'createLock',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'createLockFor',
    values: [BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'depositFor',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'epoch', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getLastUserSlope',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAmount',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseUnlockTime',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'isOwner',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isVoted',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'locked',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lockedEnd',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'ownerToId', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'pointHistory',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setAgency', values: [string]): string;
  encodeFunctionData(functionFragment: 'setVoter', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'slopeChanges',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupplyAt',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupplyAtT',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'userPointEpoch',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'userPointHistory',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'userPointHistoryTs',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'voted', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'voter', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'voting',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'abstain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'agency', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfAtLockerId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfLockerId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfLockerIdAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createLock', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'createLockFor',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epoch', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getLastUserSlope',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseUnlockTime',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isVoted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'locked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerToId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pointHistory',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setAgency', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVoter', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'slopeChanges',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupplyAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupplyAtT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userPointEpoch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userPointHistory',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userPointHistoryTs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256,uint256,uint256,uint8,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Supply(uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Supply'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface VotingEscrow extends BaseContract {
  contractName: 'VotingEscrow';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingEscrowInterface;

  functions: {
    abstain(
      _lockerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    agency(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAtLockerId(
      _lockerId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balanceOfLockerId(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balanceOfLockerIdAt(
      _lockerId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    createLock(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    createLockFor(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    depositFor(
      _for: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastUserSlope(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    increaseAmount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    increaseUnlockTime(
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isOwner(
      _spender: string,
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isVoted(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    locked(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    lockedEnd(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    ownerToId(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pointHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    setAgency(
      _agency: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setVoter(
      _voter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    slopeChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalSupplyAtT(
      t: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    userPointEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    userPointHistory(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    userPointHistoryTs(
      _lockerId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    voter(overrides?: CallOverrides): Promise<[string]>;

    voting(
      _lockerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  abstain(
    _lockerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  agency(overrides?: CallOverrides): Promise<string>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAtLockerId(
    _lockerId: BigNumberish,
    _block: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfLockerId(
    _lockerId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfLockerIdAt(
    _lockerId: BigNumberish,
    _t: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  checkpoint(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  createLock(
    _value: BigNumberish,
    _lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  createLockFor(
    _value: BigNumberish,
    _lockDuration: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  depositFor(
    _for: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  getLastUserSlope(
    _lockerId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  increaseAmount(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  increaseUnlockTime(
    _lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    tokenAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isOwner(
    _spender: string,
    _lockerId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isVoted(_lockerId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  locked(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

  lockedEnd(
    _lockerId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(_lockerId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ownerToId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pointHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
    }
  >;

  setAgency(
    _agency: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setVoter(
    _voter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  slopeChanges(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    _block: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalSupplyAtT(
    t: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  userPointEpoch(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  userPointHistory(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
    }
  >;

  userPointHistoryTs(
    _lockerId: BigNumberish,
    _idx: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  voter(overrides?: CallOverrides): Promise<string>;

  voting(
    _lockerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    abstain(_lockerId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    agency(overrides?: CallOverrides): Promise<string>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAtLockerId(
      _lockerId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfLockerId(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfLockerIdAt(
      _lockerId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    createLock(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createLockFor(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    depositFor(
      _for: string,
      _value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    getLastUserSlope(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAmount(
      _value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    increaseUnlockTime(
      _lockDuration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialize(tokenAddr: string, overrides?: CallOverrides): Promise<void>;

    isOwner(
      _spender: string,
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isVoted(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    locked(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    lockedEnd(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    ownerToId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pointHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    setAgency(_agency: string, overrides?: CallOverrides): Promise<void>;

    setVoter(_voter: string, overrides?: CallOverrides): Promise<void>;

    slopeChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupplyAtT(
      t: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userPointEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userPointHistory(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    userPointHistoryTs(
      _lockerId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    voter(overrides?: CallOverrides): Promise<string>;

    voting(_lockerId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  estimateGas: {
    abstain(
      _lockerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    agency(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAtLockerId(
      _lockerId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfLockerId(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfLockerIdAt(
      _lockerId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    createLock(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    createLockFor(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      _for: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    getLastUserSlope(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAmount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    increaseUnlockTime(
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isOwner(
      _spender: string,
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isVoted(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    locked(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lockedEnd(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    ownerToId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pointHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setAgency(
      _agency: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setVoter(
      _voter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    slopeChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupplyAtT(
      t: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userPointEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userPointHistory(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userPointHistoryTs(
      _lockerId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    voter(overrides?: CallOverrides): Promise<BigNumber>;

    voting(
      _lockerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abstain(
      _lockerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    agency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfAtLockerId(
      _lockerId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfLockerId(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfLockerIdAt(
      _lockerId: BigNumberish,
      _t: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    checkpoint(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    createLock(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    createLockFor(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFor(
      _for: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastUserSlope(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseAmount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    increaseUnlockTime(
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isOwner(
      _spender: string,
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isVoted(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lockedEnd(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      _lockerId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ownerToId(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pointHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setAgency(
      _agency: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setVoter(
      _voter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    slopeChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupplyAtT(
      t: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userPointEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userPointHistory(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userPointHistoryTs(
      _lockerId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voted(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting(
      _lockerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
