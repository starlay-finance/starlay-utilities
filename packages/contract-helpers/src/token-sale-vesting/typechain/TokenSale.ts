/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Provider } from '@ethersproject/providers';

export interface TokenSaleInterface extends utils.Interface {
  contractName: 'TokenSale';
  functions: {
    '_whiteListed(address)': FunctionFragment;
    'addWhiteLilstedClaimer(address)': FunctionFragment;
    'allocated(address)': FunctionFragment;
    'cliffDays()': FunctionFragment;
    'depositInVe(uint256)': FunctionFragment;
    'lock(uint256,uint256)': FunctionFragment;
    'lockableAmount(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'releasableAmount(address)': FunctionFragment;
    'release()': FunctionFragment;
    'releaseFor(address)': FunctionFragment;
    'removeWhiteLilstedClaimer(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'setVe(address)': FunctionFragment;
    'startTimestamp()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    've()': FunctionFragment;
    'vestedAmount(address)': FunctionFragment;
    'vestingDays()': FunctionFragment;
    'vestingEnd()': FunctionFragment;
    'vestingStart()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: '_whiteListed',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'addWhiteLilstedClaimer',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'allocated', values: [string]): string;
  encodeFunctionData(functionFragment: 'cliffDays', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'depositInVe',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lock',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lockableAmount',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'releasableAmount',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'release', values?: undefined): string;
  encodeFunctionData(functionFragment: 'releaseFor', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'removeWhiteLilstedClaimer',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardToken',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'setVe', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'startTimestamp',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 've', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'vestedAmount',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'vestingDays',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'vestingEnd',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'vestingStart',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: '_whiteListed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addWhiteLilstedClaimer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'allocated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cliffDays', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositInVe',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lockableAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'releasableAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'release', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'releaseFor', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeWhiteLilstedClaimer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setVe', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'startTimestamp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 've', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'vestedAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vestingDays',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'vestingEnd', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'vestingStart',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'TokenReleased(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenReleased'): EventFragment;
}

export interface TokenSale extends BaseContract {
  contractName: 'TokenSale';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenSaleInterface;

  functions: {
    _whiteListed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    addWhiteLilstedClaimer(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allocated(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cliffDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositInVe(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lock(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lockableAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releasableAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    releaseFor(
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeWhiteLilstedClaimer(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setVe(
      _ve: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    ve(overrides?: CallOverrides): Promise<[string]>;

    vestedAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    vestingDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingStart(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _whiteListed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  addWhiteLilstedClaimer(
    claimer: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allocated(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  cliffDays(overrides?: CallOverrides): Promise<BigNumber>;

  depositInVe(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lock(
    _value: BigNumberish,
    _lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lockableAmount(
    account: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  releasableAmount(
    account: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  release(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  releaseFor(
    onBehalfOf: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeWhiteLilstedClaimer(
    claimer: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setVe(
    _ve: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  ve(overrides?: CallOverrides): Promise<string>;

  vestedAmount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  vestingDays(overrides?: CallOverrides): Promise<BigNumber>;

  vestingEnd(overrides?: CallOverrides): Promise<BigNumber>;

  vestingStart(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _whiteListed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    addWhiteLilstedClaimer(
      claimer: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    allocated(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cliffDays(overrides?: CallOverrides): Promise<BigNumber>;

    depositInVe(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lock(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    lockableAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    releasableAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    release(overrides?: CallOverrides): Promise<void>;

    releaseFor(onBehalfOf: string, overrides?: CallOverrides): Promise<void>;

    removeWhiteLilstedClaimer(
      claimer: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setVe(_ve: string, overrides?: CallOverrides): Promise<void>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    ve(overrides?: CallOverrides): Promise<string>;

    vestedAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vestingDays(overrides?: CallOverrides): Promise<BigNumber>;

    vestingEnd(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStart(overrides?: CallOverrides): Promise<BigNumber>;
  };

  estimateGas: {
    _whiteListed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addWhiteLilstedClaimer(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    allocated(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cliffDays(overrides?: CallOverrides): Promise<BigNumber>;

    depositInVe(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lock(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lockableAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releasableAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    releaseFor(
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeWhiteLilstedClaimer(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setVe(
      _ve: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    ve(overrides?: CallOverrides): Promise<BigNumber>;

    vestedAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vestingDays(overrides?: CallOverrides): Promise<BigNumber>;

    vestingEnd(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStart(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _whiteListed(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addWhiteLilstedClaimer(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allocated(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    cliffDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositInVe(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lock(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lockableAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releasableAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    releaseFor(
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeWhiteLilstedClaimer(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setVe(
      _ve: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestedAmount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vestingDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
