/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Provider } from '@ethersproject/providers';

export interface LeveragerInterface extends utils.Interface {
  contractName: 'Leverager';
  functions: {
    'close(address)': FunctionFragment;
    'getAvailableBorrows(address)': FunctionFragment;
    'getConfiguration(address)': FunctionFragment;
    'getLToken(address)': FunctionFragment;
    'getVDToken(address)': FunctionFragment;
    'lendingPool()': FunctionFragment;
    'loop(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'loopASTR(uint256,uint256,uint256)': FunctionFragment;
    'ltv(address)': FunctionFragment;
    'reverseLoop(address,address,uint256,uint256,uint256)': FunctionFragment;
    'reverseLoopASTR(address,uint256,uint256)': FunctionFragment;
    'wastr()': FunctionFragment;
    'withdrawable(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'close', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getAvailableBorrows',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getConfiguration',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'getLToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'getVDToken', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'lendingPool',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'loop',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopASTR',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'ltv', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'reverseLoop',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'reverseLoopASTR',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'wastr', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawable',
    values: [string],
  ): string;

  decodeFunctionResult(functionFragment: 'close', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAvailableBorrows',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getConfiguration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getLToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVDToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lendingPool',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'loop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loopASTR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ltv', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'reverseLoop',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'reverseLoopASTR',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'wastr', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawable',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface Leverager extends BaseContract {
  contractName: 'Leverager';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeveragerInterface;

  functions: {
    close(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAvailableBorrows(
      account: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateral: BigNumber;
        availableBorrows: BigNumber;
        priceASTR: BigNumber;
        available: BigNumber;
        _ltv: BigNumber;
        hf: BigNumber;
      }
    >;

    getConfiguration(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { data: BigNumber }>;

    getLToken(asset: string, overrides?: CallOverrides): Promise<[string]>;

    getVDToken(asset: string, overrides?: CallOverrides): Promise<[string]>;

    lendingPool(overrides?: CallOverrides): Promise<[string]>;

    loop(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      borrowRatio: BigNumberish,
      loopCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    loopASTR(
      interestRateMode: BigNumberish,
      borrowRatio: BigNumberish,
      loopCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    ltv(asset: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    reverseLoop(
      asset: string,
      ltoken: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      loopCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    reverseLoopASTR(
      lwastr: string,
      interestRateMode: BigNumberish,
      loopCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    wastr(overrides?: CallOverrides): Promise<[string]>;

    withdrawable(
      account: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        totalCollateral: BigNumber;
        totalDebt: BigNumber;
        currentLiquidationThreshold: BigNumber;
        hf: BigNumber;
        surplusedHF: BigNumber;
        limitCollateral: BigNumber;
        withdrawableCollateral: BigNumber;
      }
    >;
  };

  close(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getAvailableBorrows(
    account: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCollateral: BigNumber;
      availableBorrows: BigNumber;
      priceASTR: BigNumber;
      available: BigNumber;
      _ltv: BigNumber;
      hf: BigNumber;
    }
  >;

  getConfiguration(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLToken(asset: string, overrides?: CallOverrides): Promise<string>;

  getVDToken(asset: string, overrides?: CallOverrides): Promise<string>;

  lendingPool(overrides?: CallOverrides): Promise<string>;

  loop(
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    borrowRatio: BigNumberish,
    loopCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  loopASTR(
    interestRateMode: BigNumberish,
    borrowRatio: BigNumberish,
    loopCount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  ltv(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  reverseLoop(
    asset: string,
    ltoken: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    loopCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  reverseLoopASTR(
    lwastr: string,
    interestRateMode: BigNumberish,
    loopCount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  wastr(overrides?: CallOverrides): Promise<string>;

  withdrawable(
    account: string,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
    ] & {
      totalCollateral: BigNumber;
      totalDebt: BigNumber;
      currentLiquidationThreshold: BigNumber;
      hf: BigNumber;
      surplusedHF: BigNumber;
      limitCollateral: BigNumber;
      withdrawableCollateral: BigNumber;
    }
  >;

  callStatic: {
    close(asset: string, overrides?: CallOverrides): Promise<void>;

    getAvailableBorrows(
      account: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateral: BigNumber;
        availableBorrows: BigNumber;
        priceASTR: BigNumber;
        available: BigNumber;
        _ltv: BigNumber;
        hf: BigNumber;
      }
    >;

    getConfiguration(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLToken(asset: string, overrides?: CallOverrides): Promise<string>;

    getVDToken(asset: string, overrides?: CallOverrides): Promise<string>;

    lendingPool(overrides?: CallOverrides): Promise<string>;

    loop(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      borrowRatio: BigNumberish,
      loopCount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    loopASTR(
      interestRateMode: BigNumberish,
      borrowRatio: BigNumberish,
      loopCount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    ltv(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    reverseLoop(
      asset: string,
      ltoken: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      loopCount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    reverseLoopASTR(
      lwastr: string,
      interestRateMode: BigNumberish,
      loopCount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    wastr(overrides?: CallOverrides): Promise<string>;

    withdrawable(
      account: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        totalCollateral: BigNumber;
        totalDebt: BigNumber;
        currentLiquidationThreshold: BigNumber;
        hf: BigNumber;
        surplusedHF: BigNumber;
        limitCollateral: BigNumber;
        withdrawableCollateral: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    close(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getAvailableBorrows(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getConfiguration(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLToken(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVDToken(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    lendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    loop(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      borrowRatio: BigNumberish,
      loopCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    loopASTR(
      interestRateMode: BigNumberish,
      borrowRatio: BigNumberish,
      loopCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    ltv(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    reverseLoop(
      asset: string,
      ltoken: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      loopCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    reverseLoopASTR(
      lwastr: string,
      interestRateMode: BigNumberish,
      loopCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    wastr(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawable(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    close(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getAvailableBorrows(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getConfiguration(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLToken(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVDToken(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loop(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      borrowRatio: BigNumberish,
      loopCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    loopASTR(
      interestRateMode: BigNumberish,
      borrowRatio: BigNumberish,
      loopCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    ltv(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    reverseLoop(
      asset: string,
      ltoken: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      loopCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    reverseLoopASTR(
      lwastr: string,
      interestRateMode: BigNumberish,
      loopCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    wastr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawable(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
